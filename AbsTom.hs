module AbsTom where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Type =
   TInt
 | TBool
  deriving (Eq,Ord,Show)

data BExp =
   BTrue
 | BFalse
  deriving (Eq,Ord,Show)

data Exp =
   EOr Exp Exp
 | EAnd Exp Exp
 | EEq Exp Exp
 | ENeq Exp Exp
 | ELt Exp Exp
 | EGt Exp Exp
 | ELte Exp Exp
 | EGte Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EMod Exp Exp
 | ENeg Exp
 | ENot Exp
 | ECall Ident [Exp]
 | EVar Ident
 | EInt Integer
 | EBool BExp
 | EIver Exp
  deriving (Eq,Ord,Show)

data Decl =
   Decl Ident Type
  deriving (Eq,Ord,Show)

data Lvalue =
   LIdent Ident
  deriving (Eq,Ord,Show)

data Stm =
   SBlock [Decl] [FunDef] [Stm]
 | SExp Exp
 | SWhile Exp Stm
 | SReturn Exp
 | SAssign Lvalue Exp
 | SPrint Exp
 | SIf Exp Stm
 | SIfElse Exp Stm Stm
  deriving (Eq,Ord,Show)

data FunDef =
   FunDef Ident [Param] Type Stm
  deriving (Eq,Ord,Show)

data Param =
   PVar Ident Type
 | PRef Ident Type
  deriving (Eq,Ord,Show)

