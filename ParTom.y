-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTom where
import AbsTom
import LexTom
import ErrM

}

%name pStm Stm

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&&' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 '*' { PT _ (TS _ 7) }
 '+' { PT _ (TS _ 8) }
 ',' { PT _ (TS _ 9) }
 '-' { PT _ (TS _ 10) }
 '->' { PT _ (TS _ 11) }
 '.' { PT _ (TS _ 12) }
 '/' { PT _ (TS _ 13) }
 ':' { PT _ (TS _ 14) }
 ';' { PT _ (TS _ 15) }
 '<' { PT _ (TS _ 16) }
 '<=' { PT _ (TS _ 17) }
 '=' { PT _ (TS _ 18) }
 '==' { PT _ (TS _ 19) }
 '>' { PT _ (TS _ 20) }
 '>=' { PT _ (TS _ 21) }
 '[' { PT _ (TS _ 22) }
 ']' { PT _ (TS _ 23) }
 'bool' { PT _ (TS _ 24) }
 'else' { PT _ (TS _ 25) }
 'false' { PT _ (TS _ 26) }
 'fun' { PT _ (TS _ 27) }
 'if' { PT _ (TS _ 28) }
 'int' { PT _ (TS _ 29) }
 'print' { PT _ (TS _ 30) }
 'ref' { PT _ (TS _ 31) }
 'return' { PT _ (TS _ 32) }
 'true' { PT _ (TS _ 33) }
 'var' { PT _ (TS _ 34) }
 'while' { PT _ (TS _ 35) }
 '{' { PT _ (TS _ 36) }
 '||' { PT _ (TS _ 37) }
 '}' { PT _ (TS _ 38) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Type1 :: { Type }
Type1 : 'int' { TInt } 
  | 'bool' { TBool }
  | '(' Type ')' { $2 }


Type :: { Type }
Type : Type1 { $1 } 


BExp :: { BExp }
BExp : 'true' { BTrue } 
  | 'false' { BFalse }


Exp :: { Exp }
Exp : Exp '||' Exp1 { EOr $1 $3 } 
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '&&' Exp2 { EAnd $1 $3 } 
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '==' Exp3 { EEq $1 $3 } 
  | Exp2 '!=' Exp3 { ENeq $1 $3 }
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '<' Exp4 { ELt $1 $3 } 
  | Exp3 '>' Exp4 { EGt $1 $3 }
  | Exp3 '<=' Exp4 { ELte $1 $3 }
  | Exp3 '>=' Exp4 { EGte $1 $3 }
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp5 { EAdd $1 $3 } 
  | Exp4 '-' Exp5 { ESub $1 $3 }
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { EMul $1 $3 } 
  | Exp5 '/' Exp6 { EDiv $1 $3 }
  | Exp5 '%' Exp6 { EMod $1 $3 }
  | Exp6 { $1 }


Exp6 :: { Exp }
Exp6 : '-' Exp6 { ENeg $2 } 
  | '!' Exp6 { ENot $2 }
  | Exp7 { $1 }


Exp7 :: { Exp }
Exp7 : Ident '(' ListExp ')' { ECall $1 $3 } 
  | Exp8 { $1 }


Exp8 :: { Exp }
Exp8 : Ident { EVar $1 } 
  | Integer { EInt $1 }
  | BExp { EBool $1 }
  | '[' Exp ']' { EIver $2 }
  | '(' Exp ')' { $2 }


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


Decl :: { Decl }
Decl : 'var' Ident ':' Type { Decl $2 $4 } 


ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } 
  | ListDecl Decl '.' { flip (:) $1 $2 }


Lvalue :: { Lvalue }
Lvalue : Ident { LIdent $1 } 


Stm :: { Stm }
Stm : '{' ListDecl ListFunDef ListStm '}' { SBlock (reverse $2) (reverse $3) (reverse $4) } 
  | Exp ';' { SExp $1 }
  | 'while' '(' Exp ')' Stm { SWhile $3 $5 }
  | 'return' Exp ';' { SReturn $2 }
  | Lvalue '=' Exp ';' { SAssign $1 $3 }
  | 'print' Exp ';' { SPrint $2 }
  | 'if' '(' Exp ')' Stm { SIf $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { SIfElse $3 $5 $7 }


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm { flip (:) $1 $2 }


FunDef :: { FunDef }
FunDef : 'fun' Ident '(' ListParam ')' '->' Type Stm { FunDef $2 $4 $7 $8 } 


ListFunDef :: { [FunDef] }
ListFunDef : {- empty -} { [] } 
  | ListFunDef FunDef { flip (:) $1 $2 }


Param :: { Param }
Param : 'var' Ident ':' Type { PVar $2 $4 } 
  | 'ref' Ident ':' Type { PRef $2 $4 }


ListParam :: { [Param] }
ListParam : {- empty -} { [] } 
  | Param { (:[]) $1 }
  | Param ',' ListParam { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

