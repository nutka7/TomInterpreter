module SkelTom where

-- Haskell module generated by the BNF converter

import AbsTom
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TBool  -> failure x


transBExp :: BExp -> Result
transBExp x = case x of
  BTrue  -> failure x
  BFalse  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EOr exp0 exp  -> failure x
  EAnd exp0 exp  -> failure x
  EEq exp0 exp  -> failure x
  ENeq exp0 exp  -> failure x
  ELt exp0 exp  -> failure x
  EGt exp0 exp  -> failure x
  ELte exp0 exp  -> failure x
  EGte exp0 exp  -> failure x
  EAdd exp0 exp  -> failure x
  ESub exp0 exp  -> failure x
  EMul exp0 exp  -> failure x
  EDiv exp0 exp  -> failure x
  EMod exp0 exp  -> failure x
  ENeg exp  -> failure x
  ENot exp  -> failure x
  ECall id exps  -> failure x
  EVar id  -> failure x
  EInt n  -> failure x
  EBool bexp  -> failure x
  EIver exp  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Decl id type'  -> failure x


transLvalue :: Lvalue -> Result
transLvalue x = case x of
  LIdent id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SBlock decls fundefs stms  -> failure x
  SExp exp  -> failure x
  SWhile exp stm  -> failure x
  SReturn exp  -> failure x
  SAssign lvalue exp  -> failure x
  SPrint exp  -> failure x
  SIf exp stm  -> failure x
  SIfElse exp stm0 stm  -> failure x


transFunDef :: FunDef -> Result
transFunDef x = case x of
  FunDef id params type' stm  -> failure x


transParam :: Param -> Result
transParam x = case x of
  PVar id type'  -> failure x
  PRef id type'  -> failure x



